(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`Model`", {"GlobalVariables`", "Derivatives`", "RigidBodyDynamics`", "BipedalLocomotion`", "HybridDynamics`"}]

Begin["`Private`"]


(* ::Input::Initialization:: *)
ClearAll@BLSummary;

SetAttributes[BLSummary, Listable];
BLSummary::name = "`1` is not a valid mode.  Valid modes are `2`.";

BLSummary[var_:\[DoubleStruckX]] := BLSummary[var, Keys@BLbiped["m"]];

BLSummary[\[DoubleStruckX], name_] := Module[{a, p, m, v, b},
If[MissingQ[BLbiped["BLSummary", name]], 
Return@Message[BLSummary::name, name, Keys@BLbiped["BLSummary"]]
];

(* get actuated links during regime (most likely post-impact) *)
v = Lookup[BLbiped["BLSummary", name], "V", {}];
m = Lookup[BLbiped["BLSummary", name], "B", Automatic];
p = BLConstraints[{}, v, {}, m];

m = RBDGetIndex@p["B"]-nq;
a = ConstantArray["u", nq];
b = ConstantArray[0, nq];
Do[a[[m[[i]]]] = p[["M", i]]; b[[m[[i]]]] = i;, {i, Length@m}];

(* get pre-impact dependent variables *)
p = BLbiped["c", name, "x"];
v = ConstantArray["d", nx];
v[[p]] = "i";

(* get pre-impact state *)
p = Array[\[DoubleStruckC], Total[Length/@BLbiped["c", name]]];
p = Quiet@Flatten@BLbiped["\[DoubleStruckC]", name, "p"][{p, {}, {}}];
p = {p[[1;;nq]], p[[nq+1;;nx]]};
v = {v[[1;;nq]], v[[nq+1;;nx]]};

p = Join[{RBDGetValue[1, nq, "n" -> True]}, v, p, {a, b}];

(* q-/v- are variables in previous mode that affect name regime *)
v = {Range@nq, {"q " <> name, "q-/i", "v-/i", "q-", "v-", "B+", "B"}};
TableForm[Transpose@p, TableHeadings->v]
];

BLSummary[\[DoubleStruckC], name_] := Module[{c, p, n, d, h, t},
If[MissingQ[BLbiped["c", name]], 
Return@Message[BLSummary::name, name, Keys@BLbiped["c"]]
];

c = Array[\[DoubleStruckC], nc];
t = ConstantArray["", nc];

(* x *)
c[[1;;nx]] = RBDGetValue[1, nx, "n" -> True];
t[[1;;nx]] = "x-";

(* \[Alpha] *)
p = PolynomialCoeffcients[BLbiped["\[Alpha]", name ,"M"]];
c[[BLbiped["\[Alpha]", name, "\[Alpha]0"]]] = Table[\[DoubleStruckA][i], {i, p[["\[Eta]0", 1]]}];
c[[BLbiped["\[Alpha]", name, "\[Alpha]T"]]] = Table[\[DoubleStruckA][i], {i, p[["\[Eta]T", 1]]}];
c[[BLbiped["\[Alpha]", name, "\[Alpha]f"]]] = Table[\[DoubleStruckA][i], {i, p[["\[Alpha]", 1]]}];

t[[BLbiped["\[Alpha]", name, "\[Alpha]0"]]] = "0+";
t[[BLbiped["\[Alpha]", name, "\[Alpha]T"]]] = "T-";
t[[BLbiped["\[Alpha]", name, "\[Alpha]f"]]] = "[0+, T-]";

(* \[Mu] *)
n = Length@BLbiped["c", name, "\[Mu]"];
c[[BLbiped["c",name, "\[Mu]"]]] = Table["\[Mu]"[i], {i, n}];
t[[BLbiped["c",name, "\[Mu]"]]] = "\[Mu]";

(* T *)
n = Length@BLbiped["c", name, "T"];
c[[BLbiped["c", name, "T"]]] = Table[\[DoubleStruckT][i], {i, n}];
t[[BLbiped["c",name, "T"]]] = "T";

d = ConstantArray["-", nc];
d[[Join@@BLbiped["c",name]]] = \[DoubleStruckC] /@ Join@@BLbiped["p",name];

h = {Range@nc, {"\[DoubleStruckC] " <> name, "\[DoubleStruckC]", "note"}};
TableForm[{c, d, t}\[Transpose], TableHeadings -> h]
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
