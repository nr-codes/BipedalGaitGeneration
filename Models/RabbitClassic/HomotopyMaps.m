(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`RabbitClassic`", {"GlobalVariables`", "Derivatives`", "RigidBodyDynamics`", "BipedalLocomotion`", "BipedalLocomotion`Model`", "HybridDynamics`"}]

ConstraintManifold::usage = "";
P\[CapitalPhi]::usage = "";
H::usage = "";
OnManifold::usage = "";

(* pollute the namespace for now *)

(* parameters *)
fric = 0.6;
\[Sigma]des = 0 Degree;
vdes = 0.75;
hmin = 0.1;
uumax = 0;

(* bounds on state during trajectory *)
posbnds = {2-> {-10, 10}, 3-> {0.5, 2}, 4-> {-1, 1}, 5-> {\[Pi]-5, \[Pi]-2}, 6-> {\[Pi]-5, \[Pi]-2}, 7 -> {-2,-0.5}, 8 -> {-2, -0.5}};

velbnds = # -> {-20, 20}& /@ Range[nq+2,nq+8];

mandat::usage = "";

Begin["`Private`"]


(* ::Input::Initialization:: *)
Options[ConstraintManifold] = {BLP -> {}, Dataset -> Automatic};

ConstraintManifold[cp_, opts:OptionsPattern[]] := MapThread[Join, Values@ConstraintManifold[BLbiped["m[0]"], cp, opts]["R"]];

ConstraintManifold[m_String, cp_, OptionsPattern[]] := Module[{M, slope, swingFootAboveGround, friction, avgvel, xbnds, maxFootHeight, vhcparam, cost, R, c, calc, cons, f},
M = BLP[m, cp, OptionValue[BLP]];

cons = <|
"P" :> M[["R", All, {1, 6}]],
"slope" :> BLSlope[M, "\[Sigma]" -> \[Sigma]des],
"swingFootAboveGround" :> BLSwingFootHeight[M, Automatic],
"friction" :> BLFriction[fric, M, Automatic],
"cost" :> BLcost[M, {1-> {-Infinity, uumax}}],
"avgvel" :> BLAverageVelocity[M, "v" -> vdes],
"q(t)" :> BLStateBounds[M, posbnds],
"v(t)" :> BLStateBounds[M, velbnds],
"maxFootHeight" :> BLSwingFootHeight[M["T"][[-1]]/2, M, Once] - {hmin, 0}
|>;

calc = OptionValue[Dataset];

If[calc === Automatic, calc = Keys@cons;];
c = Values@cons[[calc]];
M["Manifold"] = M["R"] = AssociationThread[calc -> c];
M
];


(* ::Input::Initialization:: *)
Options[P\[CapitalPhi]] = {Map -> {}, BLP -> {}};
P\[CapitalPhi][c_, o:OptionsPattern[]] := P\[CapitalPhi][BLbiped["m[0]"], c, o]["R"];
P\[CapitalPhi][m_String, c_, opts:OptionsPattern[]] := Module[{M, R},
M = OptionValue[Map];
If[M === {}, 
M = ConstraintManifold[m, c, BLP -> OptionValue[BLP], Dataset -> mandat["P"]];
];

R = M["Manifold"];
M["R"] = MapThread[Join, R[#[[1]]][[#[[2]], #[[3]]]]& /@ mandat[On]];
M
];


(* ::Input::Initialization:: *)
Options[H] = {Map -> {}, BLP -> {}};
H[c_, o:OptionsPattern[]] := H[BLbiped["m[0]"], c, o];
H[m_String, c_, o:OptionsPattern[]] := Module[{M, R},
M = OptionValue[Map];
If[M === {}, 
M = ConstraintManifold[m, c, BLP -> OptionValue[BLP], Dataset -> mandat["H"]];
];

R = M["Manifold"];
MapThread[Join, R[#[[1]]][[#[[2]], #[[3]]]]& /@ mandat[Off]]
];


(* ::Input::Initialization:: *)
Options[OnManifold] = {IgnoreCase -> {}, Tolerance -> 10^-6, TableForm -> False};

OnManifold[c_, OptionsPattern[]] := Module[{f, M, R, i, j, on, off, tol, ign},
(* partition constraints *)
tol = OptionValue@Tolerance;
ign = OptionValue@IgnoreCase;
M = ConstraintManifold[BLbiped["m[0]"], c];
R = M["R"];

If[OptionValue@TableForm,
f = #2 -> Chop[Abs@#1, tol] == 0&;
f = Flatten@Values@MapIndexed[f, R[[All, 1;;1]], {3}];
f = f /. Key[x_String] :> x;
i = Which[MemberQ[ign, #1[[{1,3}]]], LightBlue, #2, Green, True, Red]&;
f = MapThread[Join[{#1}, #2[[{1,3}]], {i[#2, #3]}]&, {Range@Length@f, Keys@f, Values@f}];
TableForm[f],

(* expand ignore options for use in Delete *)
f = #2 -> Chop[Abs@#1, tol] == 0&;
f = MapIndexed[f, R[[All, 1;;1]], {3}];

(* key prevents matches in other functions, remove as head *)
i = Flatten@Values@f /. Key[x_String] :> x;
i = KeyDrop[i, Insert[#, 1, 2]& /@ ign];

on = Pick[Keys@i, Values@i, True];
off = Pick[Keys@i, Values@i, False];

f = {#[[1,1]], All, #[[All, 3]]}&;
on = f /@ GatherBy[on, First];
off = f /@ GatherBy[off, First];

(* get list of functions *)
i = DeleteDuplicates@Join[on[[All, 1]], off[[All, 1]]];
j = DeleteDuplicates@off[[All, 1]];

<|On -> on, Off -> off, "P" -> i, "H" -> j|>
]
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
