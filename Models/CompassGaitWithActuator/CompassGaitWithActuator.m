(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`CompassGaitWithActuator`", {"GlobalVariables`", "RigidBodyDynamics`", "BipedalLocomotion`", "BipedalLocomotion`Model`"}]

CompassGaitWithActuator::usage = "";
CompassGaitWithActuatorP::usage = "";
CompassGaitWithActuatorA::usage = "";

CompassGaitWithActuatorMeshOptions::usage = "";

Begin["`Private`"]


(* ::Input::Initialization:: *)
(* parameters *)
\[Mu] = 2; (* mH / m *)
\[Beta] = 1; (* b / a *)
L = 1+\[Beta];
a = 1/2;
g = {0, 9.81, 0}/a;

(* points of interest *)
foot = {0, -L, 0};
left = {"left leg", foot};
right = {"right leg", foot};

(* # of control/design parameters *)
n\[Mu] = 1;


(* ::Input::Initialization:: *)
cT[c_] := Module[{cT},
cT = c;
If[n\[Mu] > 0, cT[[-2]] = -cT[[-2]];];
cT
];

cm[s_, A_] := Module[{q, v, a, n, \[Theta]0T, C},
(* BLc indices *)
n = mm -1; (* 2D *)
{q, v} = Partition[BLIndices[BLGetBipedBase[], "p", "n" -> {\[DoubleStruckQ], \[DoubleStruckV]}], n];
q = "q" -> {q, Range@Length@q, 2A["np", s]};
v = "v" -> {v, Range@Length@v, A["np", s]};

(* polynomial scaling factors *)
\[Theta]0T = A["\[Theta]", s];

(* function specific parameters *)
a = <|"BLc" -> <|q, v|>, "BLc0T" -> <|"\[Theta]" -> \[Theta]0T|>|>;

(* create parameters *)
C = BLContinuationParameters[Association -> a, "\[Mu]" -> n\[Mu], "c[T]" -> cT];

<|s -> C|>
];

viz[] := Module[{r},
r = {4, 5, 6};
BLDontDraw[{"left leg"}];
BLRadius[0.09];
BLWidth[0.06];

<|
"axes" -> {1, 2},

"scale" -> L,

"poi" -> <|"left foot" -> \[DoubleStruckB]["left leg", r, foot], "right foot" -> \[DoubleStruckB]["right leg", r, foot]|>,

"lc" -> <|"right foot" -> LightGray|>
|>
];

CreateModel[] := Module[{com, c},
RBDNewModel[];
RBDLink["\[Theta]", Root, "m" -> 1, "S"-> "pz"];
RBDLink["left leg", Root, "m" -> \[Mu], "S"-> "pln"];

com = {0, -\[Beta], 0};
c = {"left leg-1", "right leg"};
RBDLink[c, "left leg", "m" -> 1, "com" -> com, "S"-> "rz"];
RBDLink["left leg-1", Merge];
RBDCreateModel["g" -> g];
];


(* ::Input::Initialization:: *)
CompassGaitWithActuatorMeshOptions[] := Module[{w, f, info, joints, links, A},
w = 0.25;
f = Function[x, StringRiffle[List@@x, "-"], Listable];

(* get all joint names *)
A = f[RBDGetValue[1, nq, "n" -> True]];
A = Association@Thread[A -> <|"mesh" -> <|"joint" -> <|"height" -> 1.1 w, "radius" -> w/2|>,"link" -> <|"width" -> w|>|>|>];

A
];


(* ::Input::Initialization:: *)
CompassGaitWithActuatorP[cp_, opts:OptionsPattern[]] := CompassGaitWithActuatorP[BLbiped["m[0]"], cp, opts]["R"];

CompassGaitWithActuatorP[m_String, cp_, opts:OptionsPattern[]] := Module[{n, M, R, C},
(* call periodicity map *)
M = BLP[m, cp, opts];

(* set control parameters (i.e., output torque) to zero *)
n = n\[Mu]+1;
C = M["c"][[1, All, -n;;-2]];
R = M["R"];
M["R"] = MapThread[Join, {R, C}];

M
];


(* ::Input::Initialization:: *)
CompassGaitWithActuatorA[cp_, opts:OptionsPattern[]] := CompassGaitWithActuatorA[BLbiped["m[0]"], cp, opts]["R"];

CompassGaitWithActuatorA[T_?NumericQ] := Module[{},
CompassGaitWithActuatorA[m_String, cp_, opts:OptionsPattern[]] := Module[{n, M, R, C},
M = BLP[m, cp, opts];

C = M["c"][[1, All, -1;;-1]];
R = M["R"];
C[[1]] = C[[1]] - T;
M["R"] = MapThread[Join, {R, C}];

M
]
];


(* ::Input::Initialization:: *)
CompassGaitWithActuator[n_:0] := Module[{A, C, X, J, l, r, draw, F, L, R},
CreateModel[];

(* actuation: units are N m/(kg m^2), where 1/(kg m^2) => 1/(a^2 m) *)
(* lengths are scaled by a and masses by m as defined in figure above *)
ufun = PadLeft[{#2[[-2]]Sin[2\[Pi] #1[[1]]]}, nq]&;

(* coordinate flip *)
BLA[];
A = IdentityMatrix[nq];
A[[4, 5]] = 1;
A[[5, 5]] = -1;
A = ArrayFlatten[{{A, 0}, {0, A}}];

(* feet constraints *)
F = {left, right};

(* create dynamic regimes *)
L = BLRegime["left", "P" -> <|0 -> {left}|>, "S" -> F, "n\[Mu]" -> n\[Mu]];
R = BLRegime["right", "P" -> <|0 -> {right}|>, "S" -> Reverse@F, "n\[Mu]" -> n\[Mu]];
C = Join[L, R];

(* create jumps given state of biped at transition at t- (pre-impact) *)
L = BLxT["left", "ST" -> right, "SW" -> left, "A" -> A];
R = BLxT["right", "ST" -> left, "SW" -> right, "A" -> A];
X = Join[L, R];

(* create state-time-control space parameters *)
J = <|"A" -> A|>;
A = BLCreateBiped["Compass Gait with Actuator", C, X, viz[], F, J];
C = Join[cm["left", A], cm["right", A]];
BLCreateContinuationParameters["right", C];

(* compile biped down to C code *)
BLCompileBiped[n]
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
