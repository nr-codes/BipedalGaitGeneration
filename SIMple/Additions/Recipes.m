(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code::Initialization:: *)
(*
CoreDynamicAlgorithms.nb: An implementation of the RNEA algorithm
and its derivative.
Copyright (C) 2017 Nelson Rosa Jr.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details. You should have 
received a copy of the GNU General Public License along with this program.
If not, see <http://www.gnu.org/licenses/>.
*)


(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`Model`", {"GlobalVariables`", "RigidBodyDynamics`", "BipedalLocomotion`", "Derivatives`"}]

Begin["`Private`"]


(* ::Input::Initialization:: *)
Fosim[] := Module[{nqfv, nqfu, nqfub, fosim, xdot},
nqfv = nq + nf + nv;
nqfu = nq + nf + nu;
nqfub = nqfu + 1;

fosim = LinearSolve[RigidBodyDynamics`Private`Ab[[1;;nqfv, 1;;nqfu]], RigidBodyDynamics`Private`Ab[[1;;nqfv, nqfub]]];

Flatten[{fosim}]
];

Hosim[] := Module[{nqf, nqfb, fosim, xpost},
(* set up lengths of the different constraints *)
nqf = nq + nf;
nqfb = nqf + 1;

fosim = LinearSolve[RigidBodyDynamics`Private`Ab[[1;;nqf, 1;;nqf]], RigidBodyDynamics`Private`Ab[[1;;nqf, nqfb]]];
Flatten[{fosim}]
];

cost[] := Module[{i, nqf, nqfv, nqfu, nqfub, fosim, u, uTBT, cost, Mqd},
i = RigidBodyDynamics`Private`ucons;
nqf = nq + nf;
nqfv = nq + nf + nv;
nqfu = nq + nf + nu;
nqfub = nqfu + 1;

fosim = LinearSolve[RigidBodyDynamics`Private`Ab[[1;;nqfv, 1;;nqfu]], RigidBodyDynamics`Private`Ab[[1;;nqfv, nqfub]]];

u = fosim[[nqf+1;;nqfu]];
uTBT = u.RigidBodyDynamics`Private`J[[i]];
Mqd = RigidBodyDynamics`Private`M.RigidBodyDynamics`Private`qd;

(* drop phase variable *)
uTBT = uTBT[[2;;nq]];
Mqd = Mqd[[2;;nq]];

cost = {u.u, uTBT.Mqd};

Flatten[{cost}]
];


(* ::Input::Initialization:: *)
blmfootCon[cons_] := Module[{E},
E = RBDGetRecipe["\[Eta]MbJ"];
E["name"] = "foot";
E["C"] = cons;
con["foot"] = E
];

blmfosimCon[cons_] := Module[{F, confun},
F = <|"f" :> {RigidBodyDynamics`Private`UpperTriangularizeAb, Ucon, Fosim}, "v" :> {{Pfun, _Real, 2}}|>;
F = RBDMergeRecipes["FMbJ", F];
F["C"] = cons;
F["name"] = "fosim";
con["fosim"] = F
];

blmhosimCon[cons_] := Module[{H},
H = <|"f" :> {\[Theta]0, Hosim}, "d" :> {{\[Alpha]\[Theta], _Integer, 1}}|>;
H = RBDMergeRecipes["HMbJ", H];
H["C"] = cons;
H["name"] = "hosim";
con["hosim"] = H
];

blmcostCon[cons_] := Module[{F, confun},
F = <|"f" :> {RigidBodyDynamics`Private`UpperTriangularizeAb, Ucon, cost}, "v" :> {{Pfun, _Real, 2}}|>;
F = RBDMergeRecipes["FMbJ", F];
F["C"] = cons;
F["name"] = "cost";
con["cost"] = F
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
