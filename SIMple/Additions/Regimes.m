(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`Model`", {"GlobalVariables`", "RigidBodyDynamics`", "BipedalLocomotion`"}]

Begin["`Private`"]


(* ::Input::Initialization:: *)
regime[name_, data_] := Module[{P, V, B, M, \[Theta], Pcon, n\[Mu]T, dt, J, n, m, so\[Theta], PT, Pd, Vd, S, I},
P = data["P"];
V = data["V"]; 
B = data["B"];
I = data["I"];
M = data["M"];
\[Theta] = data["\[Theta]"];
Pcon = data["Pcon"];
dt = data["dt"];
n\[Mu]T = data["n\[Mu]"] + Length@Select[DeleteDuplicates@dt, #!= 0&];
J = data["J[p]"];
S = data["S"];

(* stance foot constraints *)
RBDConQ[name <> "-p", P];
(* virtual constraints *)
RBDVirtQ[name <> "-v", V];
(* transmission matrix *)
RBDTranV[name <> "-u", B];
(* impacts *)
RBDConQ[name <> "-i", I];

(* trajectory to follow *)
n = \[Theta][[1]];
so\[Theta] = (n[[1;;2]] - {n[[3]], 0})/(n[[4]]-n[[3]]);
PT = PolynomialTrajectory[M, so\[Theta], "c" -> nx+1];

n = Length[P];
m = Length[M];
Pd = PT[["\[Eta]d", 1;;n]];
Vd = PT[["\[Eta]d", n+1;;m]];

(* add trajectories as constraints *)
RBDConQ[name <> "-b", -Pd, Thread["n" -> Range[n]]];
RBDVirtQ[name <> "-b", -Vd, Thread["n" -> Range[n+1, m]]];

(* \[Eta] constraints *)
(* w/ no coefficients, get (h0, h0dot) *)
RBDConQ[name <> "-\[Eta]0", P, "\[Phi]" -> False];
RBDVirtQ[name <> "-\[Eta]0", V, "\[Phi]" -> False];

RBDConQ[name <> "-\[Eta]T", P, "\[Phi]" -> False];
RBDVirtQ[name <> "-\[Eta]T", V, "\[Phi]" -> False];

(* w/ coefficients, get (h0-hd, h0dot-hddot) *)
n = Length[P];
RBDConQ[name <> "-\[Eta]p", P, "\[Phi]" -> False];
RBDConQ[name <> "-\[Eta]p", -Pd, Thread["n" -> Range[n]], "\[Phi]" -> False];

n = Length@V;
RBDVirtQ[name <> "-\[Eta]v", V, "\[Phi]" -> False];
RBDVirtQ[name <> "-\[Eta]v", -Vd, Thread["n" -> Range[n]], "\[Phi]" -> False];

(* each component individually, get (h0, h0dot) or (hd, hddot) *)RBDConQ[name <> "-\[Eta]a", P, "\[Phi]" -> False];
RBDVirtQ[name <> "-\[Eta]a", V, "\[Phi]" -> False];

RBDConQ[name <> "-\[Eta]d", Pd, "\[Phi]" -> False];
RBDVirtQ[name <> "-\[Eta]d", Vd, "\[Phi]" -> False];

(* slopes given stance and swing foot constraints *)
RBDConQ[name <> "-\[Sigma]", S];

(* data *)
n = name <> "-" <>  #& /@ {"p", "v", "u", "b", "\[Eta]0", "\[Eta]T", "\[Eta]p", "\[Eta]v"};
m = {"\[Alpha]0", "\[Alpha]T", "\[Alpha]f"};
m = <|MapThread[Rule, {m, Values@PT[[{"\[Eta]0", "\[Eta]T", "\[Alpha]"}, 1]]}]|>;
RBDParameters[nx + n\[Mu]T + Length[PT["c"]]];
<|
"f" -> <|name -> n[[1;;4]]|>,
"h" -> <|name -> name <> "-i"|>,
"\[Eta]0" -> <|name -> name <> "-\[Eta]0"|>,
"\[Eta]T" -> <|name -> name <> "-\[Eta]T"|>,
"\[Eta]p" -> <|name -> name <> "-\[Eta]p"|>,
"\[Eta]v" -> <|name -> name <> "-\[Eta]v"|>,
"\[Eta]a" -> <|name -> name <> "-\[Eta]a"|>,
"\[Eta]d" -> <|name -> name <> "-\[Eta]d"|>,
"J[p]" -> <|name -> name <> "-\[Eta]p"|>,
"\[Sigma]" -> <|name -> name <> "-\[Sigma]"|>,
"B0" -> <|n[[5]] -> PT["B0"]|>,
"\[Alpha]0" -> <|n[[5]] -> PT[["\[Eta]0"]]|>,
"BT" -> <|n[[6]] -> PT["BT"]|>,
"\[Alpha]T" -> <|n[[6]] -> PT[["\[Eta]T"]]|>,
"\[Alpha]\[Theta]" -> <|name <> "-i" -> \[Theta][[2]]|>,
"\[Alpha]J[p]" -> <|name <> "-\[Eta]p" -> J|>,
"\[Theta]" -> <|name -> rbdind@\[Theta][[1, {1,3,4}]]|>,
"t" -> <|name -> dt|>,
"nc" -> <|name -> nc|>,
"np" -> <|name -> Length[P]|>,
"nv" -> <|name -> Length[V]|>,
"nu" -> <|name -> Length[B]|>,
"ni" -> <|name -> Length[I]|>,
"P" -> <|n[[3]] -> Pcon|>,
"\[Alpha]" -> <|name -> m|>,
"M" -> <|name -> M|>
|>
];


(* ::Input::Initialization:: *)
BLCreateBiped[name_, C_, XT_, draw_, feet_, init_:<||>] := Module[{c, x, A},
BLbiped = Join[<|"name" -> name, "draw" -> draw, "feet" -> feet|>, init];

c = KeyValueMap[regime, C];
x = KeyValueMap[xT, XT];

A = Merge[Join[c, x], Join@@#&];

blmfCon[A["f"]];
blmhCon[A["h"]];
blmxTCon[A["xT"]];

blm\[Eta]0Con[A["\[Eta]0"]];
blmB0Con[A["B0"]];
blm\[Alpha]0Con[A["\[Alpha]0"]];

blm\[Eta]TCon[A["\[Eta]T"]];
blmBTCon[A["BT"]];
blm\[Alpha]TCon[A["\[Alpha]T"]];

blm\[Alpha]\[Theta]Con[A["\[Alpha]\[Theta]"]];

blm\[Eta]pCon[A["\[Eta]p"]];
blm\[Eta]vCon[A["\[Eta]v"]];

blm\[Eta]aCon[A["\[Eta]a"]];
blm\[Eta]dCon[A["\[Eta]d"]];

blmJpCon[A["J[p]"]];
blm\[Alpha]JpCon[A["\[Alpha]J[p]"]];

blmPCon[A["P"]];

blmDTCon[A["t"]];

blm\[Sigma]Con[A["\[Sigma]"]];
blmfootCon[A["\[Sigma]"]];

blmcostCon[A["f"]];
blmfosimCon[A["f"]];
blmhosimCon[A["h"]];

(* add polynomial coefficients info *)
BLbiped["\[Alpha]"] = Merge[{A["\[Alpha]"], <|"M" -> #|>& /@ A["M"]}, Join@@#&];

(* add n *)
c = A[[{"np", "nv", "nu", "ni", "nc"}]];
c = Table[j -> <|i -> c[i, j]|>, {i, Keys@c}, {j, Keys@c[i]}];
BLbiped["n"] = Merge[Flatten@{c, C[[All, {"n\[Mu]"}]]}, Join@@#&];

(* make all parameter vectors the same length; mma restriction? *)
RBDParameters[Max@A["nc"]];
A[["nc", All]] = nc;

A
]


(* ::Input::Initialization:: *)
End[]
EndPackage[]
